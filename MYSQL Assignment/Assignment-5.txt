Assignment-5

1.List all the books that are written by Author Loni and has price
less then 600.
->select * from books
-> where Author_name='Loni'
-> and Cost<600;

2.List the Issue details for the books that are not returned yet.
-> select * from issue
-> where Return_date is null;

3.Update all the blank return_date with 31-Dec-06 excluding 7005
and 7006.
->update issue set Return_date="2006-12-31" 
->where Lib_Issue_Id not in(7005,7006);

4.List all the Issue details that have books issued for more then 30
days.
->SELECT *
-> FROM issue
-> WHERE DATEDIFF(CURDATE(), Issue_Date) > 30;

5.List all the books that have price in range of 500 to 750 and has
category as Database.
->select * from books
-> where Cost between 500 and 750
-> and Category="Database";

6.List all the books that belong to any one of the following
categories Science, Database, Fiction, Management.
->select * from books
-> where Category in('Science', 'Database', 'Fiction', 'Management');

7.List all the members in the descending order of Penalty due on
them.
->select * from member order by Penalty_Amount desc;

8.Modify the price of book with id 103 to Rs 300 and category to
RDBMS.
->update books
-> set Cost=300,Category="RDBMS"
-> where Book_No=103;

9.List all the books in ascending order of category and descending
order of price.
->select * from books
-> order by Category
-> ,Cost desc;

10.List all the books that contain word SQL in the name of the book.
->select * from books
-> where Book_Name like '%SQL%';

11.List the Lib_Issue_Id, Issue_Date, Return_Date and No of days
Book was issued.
->select Lib_Issue_Id,Issue_Date,Return_date,
-> datediff(Return_date,Issue_Date) As NO_Of_Days
-> from issue;

12.Find the details of the member of the Library in the order of their
joining the library.
->select * from member order by Acc_Open_Date;

13.Display the count of total no of books issued to Member 101.
->select count(*) as "Total Book"
-> from issue
-> where Member_Id=101;

14.Display the total penalty due for all the members.
->select sum(Penalty_Amount) as "Total Penalty Amount"
-> from member;

15.Display the total no of members.
->select count(*) from member;

16.Display the total no of books issued.
->select count(*) as "Total Books" from issue;

17.Display the average membership fees paid by all the members.
->select avg(Fees_paid) as "Membership Fees" from member;

18.List the various categories and count of books in each category.
->select Category,count(*)
-> from books
-> group by Category;

19.List the book_No and the number of times the book is issued in the
descending order of count.
->select Book_No,count(*)
-> from issue
-> group by Book_No
-> order by Book_No desc;

20.Find the maximum, minimum, total and average penalty amount in
the member table.
->select max(Penalty_Amount) as"Maximum Penalty Amount",
-> min(Penalty_Amount) as "Minimum Penalty Amount",
-> sum(Penalty_Amount) as "Total Penalty Amount",
-> avg(Penalty_Amount) as "Average Penalty Amount"
-> from member;

21.Display the member id and the no of books for each member that
has issued more then 2 books.
->select Member_Id,count(*) as "No Of Book"
-> from issue
-> group by Member_Id
-> having count(*)>2;

22) Display the member id, book no and no of times the same book is
issued by the member in the descending order of count.
->select Book_No,Member_Id
-> ,count(*) as "Issue_Count"
-> from issue
-> group by Book_No,Member_Id
-> order by Issue_Count desc;

23) Display the month and no of books issued each month in the
descending order of count.
->select month(Issue_Date),count(*) as "No_of_time"
-> from issue
-> group by Issue_Date
-> order by Issue_Date desc;

24) List the book_no of all the books that are not issued to any
member so far.
->select Book_No
-> from books
-> where Book_No not in(
-> select Book_No from issue);

25) List all the member id that exist in member table and has also at
least one book issued by them.
->select Member_Id from member
-> where Member_Id in
-> (select Distinct Member_Id from issue);

26) List the member ID with highest and lowest no of books issued.
->select max(Member_Id),min(Member_Id) from issue;

27) List all the Issue_details for books issued in December and July
without using any arithmetic, Logical or comparison operator.
->select * from issue
-> where Month(Issue_Date) in(12,7);

28) List the Book_No, Book_Name and Issue_date for all the books
that are issued in month of December and belong to category Database.
->select b.Book_No,b.Book_Name,i.Issue_Date
-> from books b join issue i
-> on b.Book_No=i.Book_No
-> where Month(i.Issue_Date)=12 and b.Category="Database"
-> ;

29) List the Member Id, Member Name and max books allowed in the
descending order of the max books allowed.
->select Member_Id,Member_Name,Max_Books_Allowed
-> from member order by Max_Books_Allowed desc;

30) List the Book No, Book Name, Issue_date and Return_Date for all
the books issued by Richa Sharma.
->select b.Book_No,b.Book_Name,i.Issue_Date,i.Return_date
-> from books b join issue i
-> on b.Book_No=i.Book_No
-> join member m
-> on i.Member_Id=m.Member_Id
-> where m.Member_Name="Richa Sharma";

31) List the details of all the members that have issued books in
Database category.
->select * from books b join issue i
-> on b.Book_No=i.Book_No
-> join member m
-> on i.Member_Id=m.Member_Id
-> where Category="Database";

32) List all the books that have highest price in their own category.
->select * from books
-> order by Cost desc;

33) List all the Issue_Details where Issue_date is not within the
Acc_open_date and Return_date for that member.
->select i.Lib_Issue_Id,i.Book_No,i.Member_Id,i.Issue_Date,i.Return_date
-> from issue i join member m
-> on i.Member_Id=m.Member_Id
-> where i.Issue_Date not between m.Acc_Open_Date and i.Return_date;

34) List all the members that have not issued a single book so far.
->select * from  Member m left join  Issue i
-> ON m.Member_ID = i.Member_ID
-> where  i.Member_ID IS NULL;

35) List all the members that have issued the same book as issued by
Garima.
->select * from member m join issue i
-> on m.Member_Id=i.Member_Id
-> join books
-> b on i.Book_No=b.Book_No
-> where m.Member_Name="Garima Sen";

36) List the Book_Name, Price of all the books that are not returned
for more then 30 days.
->select b.Book_Name,b.Cost,i.Issue_Date
-> from books b join issue i
-> on b.Book_No=i.Book_No
-> where datediff(curdate(),i.Issue_Date)>30 and i.Return_date is null;

37) List all the authors and book_name that has more then 1 book
written by them.
->select Author_name,count(*) from books
-> group by Author_name
-> having count(*)>1;

38) List the details of highest 3 priced books.
->select * from books
-> order by Cost desc limit 3;

39) List the total cost of all the books that are currently issued but not
returned.
->select sum(b.Cost) as "Total_Price"
-> from books b join issue i
-> on b.Book_No=i.Book_No
-> where i.Return_date is null;

40) List how many books are issued to lifetime members.
->select count(i.Book_No) as "Total_Lifetime_book_issue" from issue i join member m
-> where m.Membership_type="Lifetime";

41) List all member types and how many members are there in each
type.
->select Membership_type,count(*)
-> as "Total_Membership_type"
-> from member
-> group by Membership_type;

42) List first 5 members who had joined library.
->select * from member
-> limit 5;

43) List the members with their member type, who have issued books
during the period 1st December to 31st December.
->select * from member m join issue i
-> on m.Member_Id=i.Member_Id
-> where i.Issue_Date between '2006-12-1' and '2006-12-31';

44) List all the members who have not returned books yet.
->select m.Member_Name,i.Return_date from member m join issue i
-> on m.Member_Id=i.Member_Id
-> where i.Return_date is null;

45) List all the members who joined library on the same date Garima
joined.
->select * from member
-> where Acc_Open_Date=(
-> select Acc_Open_Date from member
-> where Member_Name="Garima Sen");

46) List all the members who has issued books from author “Loni” in
the month of December
->select * from member m join issue i
-> on m.Member_Id=i.Member_Id
-> join books b on
-> i.Book_No=b.Book_No
-> where b.Author_name="Loni" and month(i.Issue_Date)=12;

47) List names of the authors whose books are least issued by
lifetime members.
->select b.Author_name from books b
-> join issue i
-> on b.Book_No=i.Book_No
-> join member
-> m on i.Member_Id=m.Member_Id
-> where m.Membership_type="Lifetime";

48) List the names of members who has issued the books whose cost
is more than 300 rupees and whose author is “Scott Urman”.
->select m.Member_Name from member m join issue i
-> on m.Member_Id=i.Member_Id
-> join books b
-> on i.Book_No=b.Book_No
-> where b.Cost>300 and b.Author_name="Scott Urman";

49) Modify the Penalty_Amount for Garima Sen to Rs 100.
->update member set Penalty_Amount=100 where Member_Name="Garima Sen";